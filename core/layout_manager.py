from typing import List, Dict, Any, Tuple
import re


class LayoutManager:
    """Layout √©s elemek elhelyez√©s√©t kezel≈ë oszt√°ly."""
    
    def __init__(self, git_handler, text_renderer, shape_renderer):
        self.git_handler = git_handler
        self.text_renderer = text_renderer
        self.shape_renderer = shape_renderer
    
    def parse_text_with_shapes(self, text: str, compact: bool = None) -> List[Dict[str, Any]]:
        """
        Sz√∂veget elemez √©s sz√©tv√°lasztja sz√∂veg √©s alakzat elemekre.
        
        Args:
            text: Bemenet sz√∂veg (pl. "Hello \"heart\" World")
            compact: Nem haszn√°lt param√©ter (backward compatibility)
            
        Returns:
            List[Dict]: Elemek list√°ja
        """
        available_shapes = self.shape_renderer.get_available_shapes()
        
        elements = []
        current_pos = 0
        
        # Regex minta az alakzatok keres√©s√©re: "alakzat_n√©v"
        shape_pattern = r'"(' + '|'.join(available_shapes) + r')"'
        
        for match in re.finditer(shape_pattern, text):
            # Sz√∂veg hozz√°ad√°sa az alakzat el≈ëtt (ha van)
            if match.start() > current_pos:
                text_before = text[current_pos:match.start()].strip()
                if text_before:
                    elements.append({
                        'type': 'text',
                        'content': text_before
                    })
            
            # Alakzat hozz√°ad√°sa
            shape_name = match.group(1)
            elements.append({
                'type': 'shape',
                'content': shape_name
            })
            
            current_pos = match.end()
        
        # Sz√∂veg hozz√°ad√°sa az utols√≥ alakzat ut√°n (ha van)
        if current_pos < len(text):
            text_after = text[current_pos:].strip()
            if text_after:
                elements.append({
                    'type': 'text',
                    'content': text_after
                })
        
        # Ha nincs alakzat, az eg√©sz sz√∂veg
        if not elements:
            elements.append({
                'type': 'text',
                'content': text.strip()
            })
        
        return elements
    
    def create_combined_art(self):
        """Kombin√°lt art l√©trehoz√°sa sz√∂veg √©s alakzatok kever√©k√©vel."""
        print("üé® Kombin√°lt Art L√©trehoz√°sa")
        print("=" * 50)
        
        # Sz√∂veg bek√©r√©se
        text = input("üìù Mit √≠rjunk ki? ").strip()
        
        if not text:
            print("‚ùå √úres sz√∂veg!")
            return
        
        # Elemek feldolgoz√°sa
        elements = self.parse_text_with_shapes(text)
        
        print(f"\nüîç Feldolgozott elemek:")
        for i, element in enumerate(elements):
            print(f"  {i+1}. {element['type']}: '{element['content']}'")
        
        # Layout elhelyez√©se
        self._place_inline_elements(elements)
        
        print("‚úÖ Kombin√°lt art sikeresen l√©trehozva!")
    
    def _place_inline_elements(self, elements: List[Dict[str, Any]]):
        """Elemeket egym√°s mellett helyezi el inline m√≥dban."""
        current_week = 0
        current_day = 1  # K√∂z√©pre igaz√≠t√°s Y tengelyen
        
        # Teljes sz√©less√©g kisz√°m√≠t√°sa az inline elhelyez√©shez
        total_width = 0
        max_height = 0
        
        for element in elements:
            if element['type'] == 'text':
                width, height = self.text_renderer.calculate_text_dimensions(
                    element['content'], letter_spacing=1
                )
            else:  # shape
                shapes = self.shape_renderer.shape_patterns.get_patterns()
                pattern = shapes[element['content']]
                width, height = self.shape_renderer.calculate_pattern_dimensions(pattern)
            
            total_width += width + 1  # +1 az elemek k√∂z√∂tti t√°vols√°g
            max_height = max(max_height, height)
        
        # Kezd≈ë poz√≠ci√≥ k√∂z√©pre igaz√≠t√°sa
        start_week = max(0, (self.git_handler.grid_width - total_width) // 2)
        start_day = max(0, (self.git_handler.grid_height - max_height) // 2)
        
        print(f"üìç Teljes layout poz√≠ci√≥: h√©t {start_week}, nap {start_day}")
        print(f"üìè Teljes layout m√©rete: {total_width}x{max_height}")
        
        current_week = start_week
        
        # Elemek elhelyez√©se
        for element in elements:
            if element['type'] == 'text':
                print(f"üìù Sz√∂veg elhelyez√©se: '{element['content']}'")
                self.text_renderer.write_text(
                    element['content'], 
                    start_week=current_week, 
                    start_day=start_day,
                    letter_spacing=1,
                    auto_center=False
                )
                width, _ = self.text_renderer.calculate_text_dimensions(
                    element['content'], letter_spacing=1
                )
                current_week += width + 1
            
            else:  # shape
                print(f"üé® Alakzat elhelyez√©se: '{element['content']}'")
                self.shape_renderer.draw_shape(
                    element['content'],
                    start_week=current_week,
                    start_day=start_day,
                    auto_center=False
                )
                shapes = self.shape_renderer.shape_patterns.get_patterns()
                pattern = shapes[element['content']]
                width, _ = self.shape_renderer.calculate_pattern_dimensions(pattern)
                current_week += width + 1
    
    def _get_element_width(self, element: Dict[str, Any], compact: bool = None) -> int:
        """Visszaadja egy elem sz√©less√©g√©t."""
        if element['type'] == 'text':
            width, _ = self.text_renderer.calculate_text_dimensions(
                element['content'], letter_spacing=1
            )
            return width
        else:  # shape
            shapes = self.shape_renderer.shape_patterns.get_patterns()
            pattern = shapes[element['content']]
            width, _ = self.shape_renderer.calculate_pattern_dimensions(pattern)
            return width
    
    def _place_elements_automatically(self, elements: List[Dict[str, Any]]):
        """Elemeket automatikusan helyezi el a legjobb elrendez√©sben."""
        # Egyszer≈± inline elhelyez√©s most
        self._place_inline_elements(elements)
    
    def _draw_layout_elements(self, elements: List[Dict[str, Any]]):
        """Kirajzolja az elemeket a megadott poz√≠ci√≥kban."""
        for element in elements:
            if element['type'] == 'text':
                self.text_renderer.write_text(
                    element['content'],
                    start_week=element.get('week', 0),
                    start_day=element.get('day', 0),
                    auto_center=False
                )
            else:  # shape
                self.shape_renderer.draw_shape(
                    element['content'],
                    start_week=element.get('week', 0),
                    start_day=element.get('day', 0),
                    auto_center=False
                ) 